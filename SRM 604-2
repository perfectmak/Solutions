
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <queue>
#include <cmath>

using namespace std;

class PowerOfThreeEasy
{
public:
    
    class Point
    {
    public:
        Point(int x, int y, int step): x_(x), y_(y), step(step){}
        int x_;
        int y_;
        int step;
        
        Point getRight()
        {            
            return Point(x_ + pow(3, step), y_, step+1);
        }
        
        Point getUp()
        {
            
            return Point(x_, y_ + pow(3, step), step+1);
        }
        
        void print()
        {
            cout << "(" << x_ << "," << y_ << ")\n";
        }
    };
    
    int x_;
    int y_;
    int tx;
    int ty;
    
    string ableToGet(int x, int y)
    {
        x_ = y_ = 0;
        tx = ty = 0;
        
        queue<Point> point;
        
        point.push(Point(0, 0, 0));
        
        string success = "Possible";
        string failed = "Impossible";
        
        while(!point.empty())
        {
            Point tmp = point.front();
            point.pop();
            
            tmp.print();
            
            if(tmp.x_ > x && tmp.y_ > y)
            {
                return failed;
            }
            
            if(tmp.x_ == x && tmp.y_ == y)
            {
                return success;
            }
            
            point.push(tmp.getUp());
            point.push(tmp.getRight());
        }
        
        return failed;
    }
};

/*
 * 
 */
int main(int argc, char** argv)
{
    PowerOfThreeEasy pt;
    
    cout << pt.ableToGet(1, 3) << endl;
    
    return 0;
}

